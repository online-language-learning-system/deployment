version: "3.9"

# application stack - Each server when running will create a separate container

# In the internal docker network (containers call each other)
#  → you use the service name (service-name:port).
# From the host machine (browser, Postman)
#  → you use localhost + mapped port (localhost:port).

services:

  nginx:
    image: nginx:1.27.2
    container_name: "nginx"
    restart: unless-stopped
    volumes:
      - ./nginx/templates:/etc/nginx/templates
    ports:
      - "80:80"
    networks:
      - course-network

  identity: # This container used for initializing Identity Provider - Keycloak
    image: quay.io/keycloak/keycloak:26.0.2
    container_name: "identity"
    command:
      - start-dev
      - --import-realm
      - --spi-theme-cache-themes=false
      - --spi-theme-cache-templates=false
    environment:
      - KC_DB=${MSSQL_HOSTNAME}
      - KC_DB_URL=${MSSQL_DATASOURCE_URL};databaseName=identity_db;encrypt=false
      - KC_DB_USERNAME=${MSSQL_SA_USERNAME}
      - KC_DB_PASSWORD=${MSSQL_SA_PASSWORD}
      - KC_BOOTSTRAP_ADMIN_USERNAME=${KC_BOOTSTRAP_ADMIN_USERNAME}
      - KC_BOOTSTRAP_ADMIN_PASSWORD=${KC_BOOTSTRAP_ADMIN_PASSWORD}
    volumes:
      - ./identity/drivers:/opt/keycloak/providers
      - ./identity/themes/storefront-theme:/opt/keycloak/themes/storefront-theme
      - ./identity/themes/backoffice-theme:/opt/keycloak/themes/backoffice-theme
      - ./identity/realms/realm-export.json:/opt/keycloak/data/import/realm-export.json
    ports:
      - "8080:8080"
    networks:
      - course-network

  mssql:  # This container used for initializing SQL Server
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: "mssql"
    hostname: "mssql"
    ports:
      - "14330:1433"
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
    restart: unless-stopped
    volumes:
      - ./mssql/data/mssql/backups:/var/opt/mssql/backups # SQL scripts, backups
      - ./mssql/data/mssql/data:/var/opt/mssql/data       # Database files (.mdf, .ldf)
      - ./mssql/data/mssql/log:/var/opt/mssql/log         # Log files
    networks:
      - course-network

  mssql-cmd:  # This container used for executing SQL scripts in SQL Server
    image: mcr.microsoft.com/mssql-tools:latest
    container_name: "mssql-cmd"
    depends_on:
      - mssql
    command: /opt/mssql/sql_scripts/run-initialization.sh
    stdin_open: true
    volumes:
      - ./mssql/sql_scripts:/opt/mssql/sql_scripts
    networks:
      - course-network

  redis:
    image: redis:7.2
    container_name: "redis"
    ports:
      - "6379:6379"
    networks:
      - course-network

  storefront:
    container_name: "storefront"
    image: storefront-bff:latest
    ports:
      - "8000:8000"
    environment:
      - KEYCLOAK_CLIENT_SECRET_STOREFRONT=${KEYCLOAK_CLIENT_SECRET_STOREFRONT}
      - KEYCLOAK_TOKEN_URI=${KEYCLOAK_TOKEN_URI}
      - KEYCLOAK_ISSUER_URI=${KEYCLOAK_ISSUER_URI}
      - USER_SERVICE_URI=${USER_SERVICE_URI}
      - STOREFRONT_REACTJS_URI=${STOREFRONT_REACTJS_URI}
      - COURSE_SERVICE_URI=${COURSE_SERVICE_URI}
    networks:
      - course-network

  storefront-reactjs:
    container_name: "storefront-reactjs"
    image: storefront:latest
    ports:
      - "3000:80"
    networks:
      - course-network

  backoffice:
    container_name: "backoffice"
    image: backoffice-bff:latest
    ports:
      - "8040:8040"
    environment:
      - KEYCLOAK_CLIENT_SECRET_BACKOFFICE=${KEYCLOAK_CLIENT_SECRET_BACKOFFICE}
      - KEYCLOAK_TOKEN_URI=${KEYCLOAK_TOKEN_URI}
      - KEYCLOAK_ISSUER_URI=${KEYCLOAK_ISSUER_URI}
      - USER_SERVICE_URI=${USER_SERVICE_URI}
      - BACKOFFICE_REACTJS_URI=${BACKOFFICE_REACTJS_URI}
      - COURSE_SERVICE_URI=${COURSE_SERVICE_URI}
    networks:
      - course-network

  backoffice-reactjs:
    container_name: "backoffice-reactjs"
    image: backoffice:latest
    ports:
      - "3040:80"
    networks:
      - course-network

  user-service:
    build: D:/Work/course-management-system/user-service
    container_name: "user-service"
    image: user-service:latest
    ports:
      - "9000:9000"
    environment:
      - KEYCLOAK_SERVER_URI=${KEYCLOAK_SERVER_URI}
      - KEYCLOAK_CLIENT_SECRET_USER=${KEYCLOAK_CLIENT_SECRET_USER}
      - KEYCLOAK_ISSUER_URI=${KEYCLOAK_ISSUER_URI}
      # - spring.datasource.url=${USER_DATASOURCE_URL}
      # - spring.datasource.username=${MSSQL_SA_USERNAME}
      # - spring.datasource.password=${MSSQL_SA_PASSWORD}
      # - spring.datasource.driver-class-name=${SPRING_DATASOURCE_DRIVER_CLASS_NAME}
    networks:
      - course-network

  cart-service:
    image: ghcr.io/online-language-learning-system/cart-image:1.0.0
    container_name: "cart-service"
    ports:
      - "9001:9001"
    environment:
      - KEYCLOAK_ISSUER_URI=${KEYCLOAK_ISSUER_URI}
      - MSSQL_DATASOURCE_URL=${MSSQL_DATASOURCE_URL}
      - MSSQL_SA_USERNAME=${MSSQL_SA_USERNAME}
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - KEYCLOAK_TOKEN_URL=${KEYCLOAK_TOKEN_URL}
    networks:
      - course-network

  media-service:
    image: ghcr.io/online-language-learning-system/media-image:1.0.0
    container_name: "media-service"
    ports:
      - "9003:9003"
    environment:
      - KEYCLOAK_ISSUER_URI=${KEYCLOAK_ISSUER_URI}
    networks:
      - course-network

  course-service:
    image: ghcr.io/online-language-learning-system/course-image:1.0.0
    container_name: "course-service"
    ports:
      - "9002:9002"
    environment:
      - KEYCLOAK_ISSUER_URI=${KEYCLOAK_ISSUER_URI}
      - MSSQL_DATASOURCE_URL=${MSSQL_DATASOURCE_URL}
      - MSSQL_SA_USERNAME=${MSSQL_SA_USERNAME}
      - MSSQL_SA_PASSWORD=${MSSQL_SA_PASSWORD}
      - MEDIA_SERVICE=${MEDIA_SERVICE}
    networks:
      - course-network

networks:
  course-network:
    driver: bridge
    name: course-network